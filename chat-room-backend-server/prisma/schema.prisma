generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  uuid          String    @unique @db.VarChar(255)
  email         String?   @unique @db.VarChar(255)
  emailVerified DateTime? @map("email_verified")
  phoneNumber   String?   @unique @map("phone_number") @db.VarChar(255)
  phoneVerified DateTime? @map("phone_verified")
  name          String?   @unique @db.VarChar(255)
  password      String?   @db.VarChar(255)
  salt          String?   @db.Char(255)
  image         String?   @db.VarChar(255)
  state         Int       @default(0)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]

  @@index([uuid])
  @@map("users")
}

model Account {
  id                Int          @id @default(autoincrement())
  uuid              String       @default(cuid())
  userId            Int          @map("user_Id")
  type              AccountType
  provider          ProviderType
  providerAccountId String       @map("provider_account_id") @db.VarChar(255)
  refreshToken      String?      @map("refresh_token") @db.Text
  accessToken       String?      @map("access_token") @db.Text
  expiresAt         Int?         @map("expires_at")
  tokenType         String?      @map("token_type")
  scope             String?
  idToken           String?      @map("id_token") @db.Text
  sessionState      String?      @map("session_state")
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_user_id_fkey")
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique @map("user_Id")
  expires      DateTime
  sessionToken String   @map("session_token") @db.Text()
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_user_id_fkey")
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Room {
  id        Int            @id @default(autoincrement())
  uuid      String         @unique @db.VarChar(255)
  name      String?        @db.VarChar(255)
  alias     String?        @map("alias") @db.VarChar(255)
  version   Int?
  type      String?        @db.VarChar(255)
  avatar    String?        @db.VarChar(255)
  joinRules RoomJoinRules?
  topic     String?        @db.VarChar(255)
  creator   String         @db.VarChar(255)
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")

  @@index([uuid])
  @@index([creator])
  @@map("rooms")
}

enum ProviderType {
  credentials
}

enum AccountType {
  oauth
  credentials
}

enum RoomJoinRules {
  public
  invite
  knock
  restricted
  knock_restricted
  private
}
